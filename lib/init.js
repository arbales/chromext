// Generated by CoffeeScript 1.3.3
/*
# chromext
# chrome extension bootstrap with coffee, jade and stylus
# http://github.com/saschagehlich/chromext
#
# Copyright (c) 2012 FILSH Media GmbH <contact@filshmedia.net>
# MIT Licensed
*/

var exec, fs, path, promzard;

fs = require('fs');

path = require('path');

promzard = require('promzard');

exec = require('child_process').exec;

module.exports = function() {
  var destPath,
    _this = this;
  destPath = process.argv[3] ? path.resolve(process.cwd(), process.argv[3]) : process.cwd();
  return promzard(path.resolve(__dirname, 'manifest.js'), function(err, data) {
    var manifestJson, process;
    if (err != null) {
      throw err;
    }
    manifestJson = JSON.stringify(data, null, "  ");
    console.log("");
    /*
          Copy bootstrap
    */

    try {
      fs.mkdirSync(destPath);
    } catch (e) {
      if (e.code !== 'EEXIST') {
        throw e;
      }
    }
    process = exec("cp -Rv " + __dirname + "/../bootstrap/* " + destPath + "/");
    process.stdout.on('data', function(data) {
      var line, lineSplit, newFile, split, _i, _len, _results;
      split = data.split("\n");
      _results = [];
      for (_i = 0, _len = split.length; _i < _len; _i++) {
        line = split[_i];
        if (line.match(/->/i)) {
          lineSplit = line.split(" -> ");
          newFile = lineSplit[1].replace(destPath + '/', '');
          _results.push(logger.log("copy", newFile));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    return process.on('exit', function(statusCode) {
      /*
              Create manifest.json
      */
      fs.writeFileSync(path.resolve(destPath, 'manifest.json'), manifestJson);
      logger.log("create", "manifest.json");
      return logger.log("done", "");
    });
  });
};
