// Generated by CoffeeScript 1.3.3
/*
# chromext
# chrome extension bootstrap with coffee, jade and stylus
# http://github.com/saschagehlich/chromext
#
# Copyright (c) 2012 FILSH Media GmbH <contact@filshmedia.net>
# MIT Licensed
*/

var CoffeeWatcher, JadeWatcher, StylusWatcher, Watcher, cs, fs, ja, path, st, watch,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

watch = require('watch');

cs = require('coffee-script');

st = require('stylus');

ja = require('jade');

Watcher = (function() {

  function Watcher(inputDir, outputDir) {
    var _this = this;
    this.inputDir = inputDir;
    this.outputDir = outputDir;
    try {
      fs.mkdirSync(this.outputDir);
    } catch (e) {
      if (e.code !== 'EEXIST') {
        throw e;
      }
    }
    watch.createMonitor(this.inputDir, {
      ignoreDotFiles: true,
      filter: this.filter
    }, function(monitor) {
      var file, info, _ref;
      _ref = monitor.files;
      for (file in _ref) {
        info = _ref[file];
        if (!_this.filter(file)) {
          _this.compile(file);
        }
      }
      monitor.on('changed', function(f, curr, prev) {
        return _this.compile(f);
      });
      return monitor.on('created', function(f) {
        return _this.compile(f);
      });
    });
  }

  return Watcher;

})();

module.exports = {
  coffee: CoffeeWatcher = (function(_super) {

    __extends(CoffeeWatcher, _super);

    function CoffeeWatcher() {
      return CoffeeWatcher.__super__.constructor.apply(this, arguments);
    }

    CoffeeWatcher.prototype.filter = function(file) {
      return !file.match(/\.coffee$/i);
    };

    CoffeeWatcher.prototype.compile = function(f) {
      var js, jsFilename;
      try {
        js = cs.compile(fs.readFileSync(f).toString());
        jsFilename = this.outputDir + '/' + path.basename(f, '.coffee') + '.js';
        fs.writeFileSync(jsFilename, js);
        return logger.log('coffee', "" + (f.replace(this.inputDir + '/', '')) + " => " + (jsFilename.replace(this.outputDir + '/', '')));
      } catch (e) {
        return logger.error('coffee', f + ': ' + e.message);
      }
    };

    return CoffeeWatcher;

  })(Watcher),
  jade: JadeWatcher = (function(_super) {

    __extends(JadeWatcher, _super);

    function JadeWatcher() {
      return JadeWatcher.__super__.constructor.apply(this, arguments);
    }

    JadeWatcher.prototype.filter = function(file) {
      return !file.match(/\.jade$/i);
    };

    JadeWatcher.prototype.compile = function(f) {
      var html, htmlFilename;
      try {
        html = ja.compile(fs.readFileSync(f).toString());
        htmlFilename = this.outputDir + '/' + path.basename(f, '.jade') + '.html';
        fs.writeFileSync(htmlFilename, html());
        return logger.log('jade', "" + (f.replace(this.inputDir + '/', '')) + " => " + (htmlFilename.replace(this.outputDir + '/', '')));
      } catch (e) {
        return logger.error('jade', f + ': ' + e.message);
      }
    };

    return JadeWatcher;

  })(Watcher),
  stylus: StylusWatcher = (function(_super) {

    __extends(StylusWatcher, _super);

    function StylusWatcher() {
      return StylusWatcher.__super__.constructor.apply(this, arguments);
    }

    StylusWatcher.prototype.filter = function(file) {
      return !file.match(/\.styl$/i);
    };

    StylusWatcher.prototype.compile = function(f) {
      var _this = this;
      return st.render(fs.readFileSync(f).toString(), function(err, css) {
        var cssFilename;
        if (err != null) {
          return logger.error('stylus', f + ': ' + err);
        }
        cssFilename = _this.outputDir + '/' + path.basename(f, '.styl') + '.css';
        fs.writeFileSync(cssFilename, css);
        return logger.log('stylus', "" + (f.replace(_this.inputDir + '/', '')) + " => " + (cssFilename.replace(_this.outputDir + '/', '')));
      });
    };

    return StylusWatcher;

  })(Watcher)
};
